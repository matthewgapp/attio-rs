/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V2WebhooksGet200ResponseDataInnerSubscriptionsInner {
    /// Type of event the webhook is subscribed to.
    #[serde(rename = "event_type")]
    pub event_type: EventType,
    // Filters to determine whether the webhook event should be sent. If null, the filter always passes.
    // #[serde(rename = "filter", deserialize_with = "Option::deserialize")]
    // pub filter: Option<Box<crate::models::AnyOfLessThanGreaterThan>>,
}

impl V2WebhooksGet200ResponseDataInnerSubscriptionsInner {
    pub fn new(
        event_type: EventType,
        // filter: Option<crate::models::AnyOfLessThanGreaterThan>
    ) -> V2WebhooksGet200ResponseDataInnerSubscriptionsInner {
        V2WebhooksGet200ResponseDataInnerSubscriptionsInner {
            event_type,
            // filter: if let Some(x) = filter {Some(Box::new(x))} else {None},
        }
    }
}

/// Type of event the webhook is subscribed to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "comment.created")]
    CommentPeriodCreated,
    #[serde(rename = "comment.resolved")]
    CommentPeriodResolved,
    #[serde(rename = "comment.unresolved")]
    CommentPeriodUnresolved,
    #[serde(rename = "comment.deleted")]
    CommentPeriodDeleted,
    #[serde(rename = "list.created")]
    ListPeriodCreated,
    #[serde(rename = "list.updated")]
    ListPeriodUpdated,
    #[serde(rename = "list.deleted")]
    ListPeriodDeleted,
    #[serde(rename = "list-attribute.created")]
    ListAttributePeriodCreated,
    #[serde(rename = "list-attribute.updated")]
    ListAttributePeriodUpdated,
    #[serde(rename = "list-entry.created")]
    ListEntryPeriodCreated,
    #[serde(rename = "list-entry.updated")]
    ListEntryPeriodUpdated,
    #[serde(rename = "list-entry.deleted")]
    ListEntryPeriodDeleted,
    #[serde(rename = "object-attribute.created")]
    ObjectAttributePeriodCreated,
    #[serde(rename = "object-attribute.updated")]
    ObjectAttributePeriodUpdated,
    #[serde(rename = "note.created")]
    NotePeriodCreated,
    #[serde(rename = "note.updated")]
    NotePeriodUpdated,
    #[serde(rename = "note.deleted")]
    NotePeriodDeleted,
    #[serde(rename = "record.created")]
    RecordPeriodCreated,
    #[serde(rename = "record.merged")]
    RecordPeriodMerged,
    #[serde(rename = "record.updated")]
    RecordPeriodUpdated,
    #[serde(rename = "record.deleted")]
    RecordPeriodDeleted,
    #[serde(rename = "task.created")]
    TaskPeriodCreated,
    #[serde(rename = "task.updated")]
    TaskPeriodUpdated,
    #[serde(rename = "task.deleted")]
    TaskPeriodDeleted,
    #[serde(rename = "workspace-member.created")]
    WorkspaceMemberPeriodCreated,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::CommentPeriodCreated
    }
}
