/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */

/// InputValue : A union of possible value types, as required in request bodies.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValue {
    /// The type of the referenced actor. Currently, only workspace members can be written into actor reference attributes. [Read more information on actor types here](/docs/actors).
    #[serde(rename = "referenced_actor_type", deserialize_with = "Option::deserialize")]
    pub referenced_actor_type: Option<ReferencedActorType>,
    /// The ID of the referenced Actor.
    #[serde(rename = "referenced_actor_id", deserialize_with = "Option::deserialize")]
    pub referenced_actor_id: Option<serde_json::Value>,
    /// Workspace member actors can be referenced by email address as well as actor ID.
    #[serde(rename = "workspace_member_email_address", deserialize_with = "Option::deserialize")]
    pub workspace_member_email_address: Option<serde_json::Value>,
    /// A timestamp value represents a single, universal moment in time using an ISO 8601 formatted string. This means that a timestamp consists of a date, a time (with nanosecond precision), and a time zone. Attio will coerce timestamps which do not provide full nanosecond precision and UTC is assumed if no time zone is provided. For example, \"2023\", \"2023-01\", \"2023-01-02\", \"2023-01-02T13:00\", \"2023-01-02T13:00:00\", and \"2023-01-02T13:00:00.000000000\" will all be coerced to \"2023-01-02T13:00:00.000000000Z\". Timestamps are always returned in UTC. For example, writing a timestamp value using the string \"2023-01-02T13:00:00.000000000+02:00\" will result in the value \"2023-01-02T11:00:00.000000000Z\" being returned.
    #[serde(rename = "value", deserialize_with = "Option::deserialize")]
    pub value: Option<serde_json::Value>,
    /// A numerical representation of the currency value. A decimal with a max of 4 decimal places.
    #[serde(rename = "currency_value", deserialize_with = "Option::deserialize")]
    pub currency_value: Option<serde_json::Value>,
    /// The full domain of the website.
    #[serde(rename = "domain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub domain: Option<Option<serde_json::Value>>,
    /// An email address string
    #[serde(rename = "email_address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_address: Option<Option<serde_json::Value>>,
    /// A UUID or slug to identify the object that the referenced record belongs to.
    #[serde(rename = "target_object", deserialize_with = "Option::deserialize")]
    pub target_object: Option<serde_json::Value>,
    /// A UUID to identify the referenced record.
    #[serde(rename = "target_record_id", deserialize_with = "Option::deserialize")]
    pub target_record_id: Option<serde_json::Value>,
    #[serde(rename = "[slug_or_id_of_matching_attribute]", deserialize_with = "Option::deserialize")]
    pub left_square_bracket_slug_or_id_of_matching_attribute_right_square_bracket: Option<serde_json::Value>,
    /// The type of interaction e.g. calendar or email.
    #[serde(rename = "interaction_type", deserialize_with = "Option::deserialize")]
    pub interaction_type: Option<InteractionType>,
    /// When the interaction occurred.
    #[serde(rename = "interacted_at", deserialize_with = "Option::deserialize")]
    pub interacted_at: Option<serde_json::Value>,
    #[serde(rename = "owner_actor")]
    pub owner_actor: Box<crate::models::InputValueAnyOf9OwnerActor>,
    /// The first line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
    #[serde(rename = "line_1", deserialize_with = "Option::deserialize")]
    pub line_1: Option<serde_json::Value>,
    /// The second line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
    #[serde(rename = "line_2", deserialize_with = "Option::deserialize")]
    pub line_2: Option<serde_json::Value>,
    /// The third line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
    #[serde(rename = "line_3", deserialize_with = "Option::deserialize")]
    pub line_3: Option<serde_json::Value>,
    /// The fourth line of the address. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.
    #[serde(rename = "line_4", deserialize_with = "Option::deserialize")]
    pub line_4: Option<serde_json::Value>,
    /// The town, neighborhood or area the location is in.
    #[serde(rename = "locality", deserialize_with = "Option::deserialize")]
    pub locality: Option<serde_json::Value>,
    /// The state, county, province or region that the location is in.
    #[serde(rename = "region", deserialize_with = "Option::deserialize")]
    pub region: Option<serde_json::Value>,
    /// The postcode or zip code for the location. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.}
    #[serde(rename = "postcode", deserialize_with = "Option::deserialize")]
    pub postcode: Option<serde_json::Value>,
    /// The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to. Optional if `original_phone_number` includes a country code prefix.
    #[serde(rename = "country_code", deserialize_with = "Option::deserialize")]
    pub country_code: Option<CountryCode>,
    /// The latitude of the location. Validated by the regular expression `/^[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?)$/`. Note that this value is not currently represented in the UI but will be persisted and readable through API calls.}
    #[serde(rename = "latitude", deserialize_with = "Option::deserialize")]
    pub latitude: Option<serde_json::Value>,
    /// The longitude of the location. Validated by the regular expression `/^[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$/`
    #[serde(rename = "longitude", deserialize_with = "Option::deserialize")]
    pub longitude: Option<serde_json::Value>,
    /// The first name.
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<serde_json::Value>>,
    /// The last name.
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<serde_json::Value>>,
    /// The full name.
    #[serde(rename = "full_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<Option<serde_json::Value>>,
    /// A phone number which is either a) prefixed with a country code (e.g. `+44....`) or b) a local number, where `country_code` is specified in addition.
    #[serde(rename = "original_phone_number", deserialize_with = "Option::deserialize")]
    pub original_phone_number: Option<serde_json::Value>,
    /// The UUID or status title identifying the selected status.
    #[serde(rename = "status", deserialize_with = "Option::deserialize")]
    pub status: Option<serde_json::Value>,
    /// The UUID or select option title identifying the selected select option.
    #[serde(rename = "option", deserialize_with = "Option::deserialize")]
    pub option: Option<serde_json::Value>,
}

impl InputValue {
    /// A union of possible value types, as required in request bodies.
    pub fn new(referenced_actor_type: Option<ReferencedActorType>, referenced_actor_id: Option<serde_json::Value>, workspace_member_email_address: Option<serde_json::Value>, value: Option<serde_json::Value>, currency_value: Option<serde_json::Value>, target_object: Option<serde_json::Value>, target_record_id: Option<serde_json::Value>, left_square_bracket_slug_or_id_of_matching_attribute_right_square_bracket: Option<serde_json::Value>, interaction_type: Option<InteractionType>, interacted_at: Option<serde_json::Value>, owner_actor: crate::models::InputValueAnyOf9OwnerActor, line_1: Option<serde_json::Value>, line_2: Option<serde_json::Value>, line_3: Option<serde_json::Value>, line_4: Option<serde_json::Value>, locality: Option<serde_json::Value>, region: Option<serde_json::Value>, postcode: Option<serde_json::Value>, country_code: Option<CountryCode>, latitude: Option<serde_json::Value>, longitude: Option<serde_json::Value>, original_phone_number: Option<serde_json::Value>, status: Option<serde_json::Value>, option: Option<serde_json::Value>) -> InputValue {
        InputValue {
            referenced_actor_type,
            referenced_actor_id,
            workspace_member_email_address,
            value,
            currency_value,
            domain: None,
            email_address: None,
            target_object,
            target_record_id,
            left_square_bracket_slug_or_id_of_matching_attribute_right_square_bracket,
            interaction_type,
            interacted_at,
            owner_actor: Box::new(owner_actor),
            line_1,
            line_2,
            line_3,
            line_4,
            locality,
            region,
            postcode,
            country_code,
            latitude,
            longitude,
            first_name: None,
            last_name: None,
            full_name: None,
            original_phone_number,
            status,
            option,
        }
    }
}

/// The type of the referenced actor. Currently, only workspace members can be written into actor reference attributes. [Read more information on actor types here](/docs/actors).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReferencedActorType {
    #[serde(rename = "workspace-member")]
    WorkspaceMember,
}

impl Default for ReferencedActorType {
    fn default() -> ReferencedActorType {
        Self::WorkspaceMember
    }
}
/// The type of interaction e.g. calendar or email.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InteractionType {
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "calendar-event")]
    CalendarEvent,
}

impl Default for InteractionType {
    fn default() -> InteractionType {
        Self::Email
    }
}
/// The ISO 3166-1 alpha-2 country code representing the country that this phone number belongs to. Optional if `original_phone_number` includes a country code prefix.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CountryCode {
    #[serde(rename = "AF")]
    Af,
    #[serde(rename = "AX")]
    Ax,
    #[serde(rename = "AL")]
    Al,
    #[serde(rename = "DZ")]
    Dz,
    #[serde(rename = "AS")]
    As,
    #[serde(rename = "AD")]
    Ad,
    #[serde(rename = "AO")]
    Ao,
    #[serde(rename = "AI")]
    Ai,
    #[serde(rename = "AQ")]
    Aq,
    #[serde(rename = "AG")]
    Ag,
    #[serde(rename = "AR")]
    Ar,
    #[serde(rename = "AM")]
    Am,
    #[serde(rename = "AW")]
    Aw,
    #[serde(rename = "AU")]
    Au,
    #[serde(rename = "AT")]
    At,
    #[serde(rename = "AZ")]
    Az,
    #[serde(rename = "BS")]
    Bs,
    #[serde(rename = "BH")]
    Bh,
    #[serde(rename = "BD")]
    Bd,
    #[serde(rename = "BB")]
    Bb,
    #[serde(rename = "BY")]
    By,
    #[serde(rename = "BE")]
    Be,
    #[serde(rename = "BZ")]
    Bz,
    #[serde(rename = "BJ")]
    Bj,
    #[serde(rename = "BM")]
    Bm,
    #[serde(rename = "BT")]
    Bt,
    #[serde(rename = "BO")]
    Bo,
    #[serde(rename = "BA")]
    Ba,
    #[serde(rename = "BW")]
    Bw,
    #[serde(rename = "BV")]
    Bv,
    #[serde(rename = "BR")]
    Br,
    #[serde(rename = "IO")]
    Io,
    #[serde(rename = "BN")]
    Bn,
    #[serde(rename = "BG")]
    Bg,
    #[serde(rename = "BF")]
    Bf,
    #[serde(rename = "BI")]
    Bi,
    #[serde(rename = "KH")]
    Kh,
    #[serde(rename = "CM")]
    Cm,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "CV")]
    Cv,
    #[serde(rename = "KY")]
    Ky,
    #[serde(rename = "CF")]
    Cf,
    #[serde(rename = "TD")]
    Td,
    #[serde(rename = "CL")]
    Cl,
    #[serde(rename = "CN")]
    Cn,
    #[serde(rename = "CX")]
    Cx,
    #[serde(rename = "CC")]
    Cc,
    #[serde(rename = "CO")]
    Co,
    #[serde(rename = "KM")]
    Km,
    #[serde(rename = "CG")]
    Cg,
    #[serde(rename = "CD")]
    Cd,
    #[serde(rename = "CK")]
    Ck,
    #[serde(rename = "CR")]
    Cr,
    #[serde(rename = "CI")]
    Ci,
    #[serde(rename = "HR")]
    Hr,
    #[serde(rename = "CU")]
    Cu,
    #[serde(rename = "CY")]
    Cy,
    #[serde(rename = "CZ")]
    Cz,
    #[serde(rename = "DK")]
    Dk,
    #[serde(rename = "DJ")]
    Dj,
    #[serde(rename = "DM")]
    Dm,
    #[serde(rename = "DO")]
    Do,
    #[serde(rename = "EC")]
    Ec,
    #[serde(rename = "EG")]
    Eg,
    #[serde(rename = "SV")]
    Sv,
    #[serde(rename = "GQ")]
    Gq,
    #[serde(rename = "ER")]
    Er,
    #[serde(rename = "EE")]
    Ee,
    #[serde(rename = "ET")]
    Et,
    #[serde(rename = "FK")]
    Fk,
    #[serde(rename = "FO")]
    Fo,
    #[serde(rename = "FJ")]
    Fj,
    #[serde(rename = "FI")]
    Fi,
    #[serde(rename = "FR")]
    Fr,
    #[serde(rename = "GF")]
    Gf,
    #[serde(rename = "PF")]
    Pf,
    #[serde(rename = "TF")]
    Tf,
    #[serde(rename = "GA")]
    Ga,
    #[serde(rename = "GM")]
    Gm,
    #[serde(rename = "GE")]
    Ge,
    #[serde(rename = "DE")]
    De,
    #[serde(rename = "GH")]
    Gh,
    #[serde(rename = "GI")]
    Gi,
    #[serde(rename = "GR")]
    Gr,
    #[serde(rename = "GL")]
    Gl,
    #[serde(rename = "GD")]
    Gd,
    #[serde(rename = "GP")]
    Gp,
    #[serde(rename = "GU")]
    Gu,
    #[serde(rename = "GT")]
    Gt,
    #[serde(rename = "GG")]
    Gg,
    #[serde(rename = "GN")]
    Gn,
    #[serde(rename = "GW")]
    Gw,
    #[serde(rename = "GY")]
    Gy,
    #[serde(rename = "HT")]
    Ht,
    #[serde(rename = "HM")]
    Hm,
    #[serde(rename = "VA")]
    Va,
    #[serde(rename = "HN")]
    Hn,
    #[serde(rename = "HK")]
    Hk,
    #[serde(rename = "HU")]
    Hu,
    #[serde(rename = "IS")]
    Is,
    #[serde(rename = "IN")]
    In,
    #[serde(rename = "ID")]
    Id,
    #[serde(rename = "IR")]
    Ir,
    #[serde(rename = "IQ")]
    Iq,
    #[serde(rename = "IE")]
    Ie,
    #[serde(rename = "IM")]
    Im,
    #[serde(rename = "IL")]
    Il,
    #[serde(rename = "IT")]
    It,
    #[serde(rename = "JM")]
    Jm,
    #[serde(rename = "JP")]
    Jp,
    #[serde(rename = "JE")]
    Je,
    #[serde(rename = "JO")]
    Jo,
    #[serde(rename = "KZ")]
    Kz,
    #[serde(rename = "KE")]
    Ke,
    #[serde(rename = "KI")]
    Ki,
    #[serde(rename = "KR")]
    Kr,
    #[serde(rename = "KW")]
    Kw,
    #[serde(rename = "KG")]
    Kg,
    #[serde(rename = "LA")]
    La,
    #[serde(rename = "LV")]
    Lv,
    #[serde(rename = "LB")]
    Lb,
    #[serde(rename = "LS")]
    Ls,
    #[serde(rename = "LR")]
    Lr,
    #[serde(rename = "LY")]
    Ly,
    #[serde(rename = "LI")]
    Li,
    #[serde(rename = "LT")]
    Lt,
    #[serde(rename = "LU")]
    Lu,
    #[serde(rename = "MO")]
    Mo,
    #[serde(rename = "MK")]
    Mk,
    #[serde(rename = "MG")]
    Mg,
    #[serde(rename = "MW")]
    Mw,
    #[serde(rename = "MY")]
    My,
    #[serde(rename = "MV")]
    Mv,
    #[serde(rename = "ML")]
    Ml,
    #[serde(rename = "MT")]
    Mt,
    #[serde(rename = "MH")]
    Mh,
    #[serde(rename = "MQ")]
    Mq,
    #[serde(rename = "MR")]
    Mr,
    #[serde(rename = "MU")]
    Mu,
    #[serde(rename = "YT")]
    Yt,
    #[serde(rename = "MX")]
    Mx,
    #[serde(rename = "FM")]
    Fm,
    #[serde(rename = "MD")]
    Md,
    #[serde(rename = "MC")]
    Mc,
    #[serde(rename = "MN")]
    Mn,
    #[serde(rename = "ME")]
    Me,
    #[serde(rename = "MS")]
    Ms,
    #[serde(rename = "MA")]
    Ma,
    #[serde(rename = "MZ")]
    Mz,
    #[serde(rename = "MM")]
    Mm,
    #[serde(rename = "NA")]
    Na,
    #[serde(rename = "NR")]
    Nr,
    #[serde(rename = "NP")]
    Np,
    #[serde(rename = "NL")]
    Nl,
    #[serde(rename = "AN")]
    An,
    #[serde(rename = "NC")]
    Nc,
    #[serde(rename = "NZ")]
    Nz,
    #[serde(rename = "NI")]
    Ni,
    #[serde(rename = "NE")]
    Ne,
    #[serde(rename = "NG")]
    Ng,
    #[serde(rename = "NU")]
    Nu,
    #[serde(rename = "NF")]
    Nf,
    #[serde(rename = "MP")]
    Mp,
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "OM")]
    Om,
    #[serde(rename = "PK")]
    Pk,
    #[serde(rename = "PW")]
    Pw,
    #[serde(rename = "PS")]
    Ps,
    #[serde(rename = "PA")]
    Pa,
    #[serde(rename = "PG")]
    Pg,
    #[serde(rename = "PY")]
    Py,
    #[serde(rename = "PE")]
    Pe,
    #[serde(rename = "PH")]
    Ph,
    #[serde(rename = "PN")]
    Pn,
    #[serde(rename = "PL")]
    Pl,
    #[serde(rename = "PT")]
    Pt,
    #[serde(rename = "PR")]
    Pr,
    #[serde(rename = "QA")]
    Qa,
    #[serde(rename = "RE")]
    Re,
    #[serde(rename = "RO")]
    Ro,
    #[serde(rename = "RU")]
    Ru,
    #[serde(rename = "RW")]
    Rw,
    #[serde(rename = "BL")]
    Bl,
    #[serde(rename = "SH")]
    Sh,
    #[serde(rename = "KN")]
    Kn,
    #[serde(rename = "LC")]
    Lc,
    #[serde(rename = "MF")]
    Mf,
    #[serde(rename = "PM")]
    Pm,
    #[serde(rename = "VC")]
    Vc,
    #[serde(rename = "WS")]
    Ws,
    #[serde(rename = "SM")]
    Sm,
    #[serde(rename = "ST")]
    St,
    #[serde(rename = "SA")]
    Sa,
    #[serde(rename = "SN")]
    Sn,
    #[serde(rename = "RS")]
    Rs,
    #[serde(rename = "SC")]
    Sc,
    #[serde(rename = "SL")]
    Sl,
    #[serde(rename = "SG")]
    Sg,
    #[serde(rename = "SK")]
    Sk,
    #[serde(rename = "SI")]
    Si,
    #[serde(rename = "SB")]
    Sb,
    #[serde(rename = "SO")]
    So,
    #[serde(rename = "ZA")]
    Za,
    #[serde(rename = "GS")]
    Gs,
    #[serde(rename = "ES")]
    Es,
    #[serde(rename = "LK")]
    Lk,
    #[serde(rename = "SD")]
    Sd,
    #[serde(rename = "SR")]
    Sr,
    #[serde(rename = "SJ")]
    Sj,
    #[serde(rename = "SZ")]
    Sz,
    #[serde(rename = "SE")]
    Se,
    #[serde(rename = "CH")]
    Ch,
    #[serde(rename = "SY")]
    Sy,
    #[serde(rename = "TW")]
    Tw,
    #[serde(rename = "TJ")]
    Tj,
    #[serde(rename = "TZ")]
    Tz,
    #[serde(rename = "TH")]
    Th,
    #[serde(rename = "TL")]
    Tl,
    #[serde(rename = "TG")]
    Tg,
    #[serde(rename = "TK")]
    Tk,
    #[serde(rename = "TO")]
    To,
    #[serde(rename = "TT")]
    Tt,
    #[serde(rename = "TN")]
    Tn,
    #[serde(rename = "TR")]
    Tr,
    #[serde(rename = "TM")]
    Tm,
    #[serde(rename = "TC")]
    Tc,
    #[serde(rename = "TV")]
    Tv,
    #[serde(rename = "UG")]
    Ug,
    #[serde(rename = "UA")]
    Ua,
    #[serde(rename = "AE")]
    Ae,
    #[serde(rename = "GB")]
    Gb,
    #[serde(rename = "US")]
    Us,
    #[serde(rename = "UM")]
    Um,
    #[serde(rename = "UY")]
    Uy,
    #[serde(rename = "UZ")]
    Uz,
    #[serde(rename = "VU")]
    Vu,
    #[serde(rename = "VE")]
    Ve,
    #[serde(rename = "VN")]
    Vn,
    #[serde(rename = "VG")]
    Vg,
    #[serde(rename = "VI")]
    Vi,
    #[serde(rename = "WF")]
    Wf,
    #[serde(rename = "EH")]
    Eh,
    #[serde(rename = "YE")]
    Ye,
    #[serde(rename = "ZM")]
    Zm,
    #[serde(rename = "ZW")]
    Zw,
}

impl Default for CountryCode {
    fn default() -> CountryCode {
        Self::Af
    }
}

