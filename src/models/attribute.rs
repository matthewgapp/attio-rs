/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attribute {
    #[serde(rename = "id")]
    pub id: Box<crate::models::AttributeId>,
    /// A title for the attribute, to be displayed across the app.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<serde_json::Value>,
    /// A text description of the attribute.
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<serde_json::Value>,
    /// A unique slug for the attribute for use in API responses and URLs. Formatted in snake case.
    #[serde(rename = "api_slug", deserialize_with = "Option::deserialize")]
    pub api_slug: Option<serde_json::Value>,
    /// The type of the attribute.
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<Type>,
    /// `true` if this is an Attio system-defined attribute, `false` if defined by a user or non-Attio system.
    #[serde(rename = "is_system_attribute", deserialize_with = "Option::deserialize")]
    pub is_system_attribute: Option<serde_json::Value>,
    /// Whether or not this attribute can be written to. Can only be false when `is_system_attribute` is `true` (user-defined attributes are always writeable). If `false`, this usually means the attribute is enriched by Attio.
    #[serde(rename = "is_writable", deserialize_with = "Option::deserialize")]
    pub is_writable: Option<serde_json::Value>,
    /// When `is_required` is `true`, new records/entries must have a value for this attribute. If `false`, values may be `null`. This value does not affect existing data and you do not need to backfill `null` values if changing `is_required` from `false` to `true`.
    #[serde(rename = "is_required", deserialize_with = "Option::deserialize")]
    pub is_required: Option<serde_json::Value>,
    /// Whether or not new values for this attribute must be unique. Uniqueness restrictions are only applied to new data and do not apply retroactively to previously created data.
    #[serde(rename = "is_unique", deserialize_with = "Option::deserialize")]
    pub is_unique: Option<serde_json::Value>,
    /// Whether or not this attribute can have multiple values. Multiselect is only available on some value types.
    #[serde(rename = "is_multiselect", deserialize_with = "Option::deserialize")]
    pub is_multiselect: Option<serde_json::Value>,
    /// Whether this attribute has a default value enabled. Must be `true` when `is_required` is `true`.
    #[serde(rename = "is_default_value_enabled", deserialize_with = "Option::deserialize")]
    pub is_default_value_enabled: Option<serde_json::Value>,
    /// Whether this attribute has been archived. Archived attributes are hidden from most UI, but can be restored either over the API or in workspace settings. See the [guide on archiving and deleting](/docs/archiving-vs-deleting)for more information.
    #[serde(rename = "is_archived", deserialize_with = "Option::deserialize")]
    pub is_archived: Option<serde_json::Value>,
    #[serde(rename = "default_value")]
    pub default_value: Box<crate::models::AttributeDefaultValue>,
    #[serde(rename = "relationship")]
    pub relationship: Box<crate::models::AttributeRelationship>,
    /// When this attribute was created.
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<serde_json::Value>,
    #[serde(rename = "config")]
    pub config: Box<crate::models::AttributeConfig>,
}

impl Attribute {
    pub fn new(id: crate::models::AttributeId, title: Option<serde_json::Value>, description: Option<serde_json::Value>, api_slug: Option<serde_json::Value>, r#type: Option<Type>, is_system_attribute: Option<serde_json::Value>, is_writable: Option<serde_json::Value>, is_required: Option<serde_json::Value>, is_unique: Option<serde_json::Value>, is_multiselect: Option<serde_json::Value>, is_default_value_enabled: Option<serde_json::Value>, is_archived: Option<serde_json::Value>, default_value: crate::models::AttributeDefaultValue, relationship: crate::models::AttributeRelationship, created_at: Option<serde_json::Value>, config: crate::models::AttributeConfig) -> Attribute {
        Attribute {
            id: Box::new(id),
            title,
            description,
            api_slug,
            r#type,
            is_system_attribute,
            is_writable,
            is_required,
            is_unique,
            is_multiselect,
            is_default_value_enabled,
            is_archived,
            default_value: Box::new(default_value),
            relationship: Box::new(relationship),
            created_at,
            config: Box::new(config),
        }
    }
}

/// The type of the attribute.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "checkbox")]
    Checkbox,
    #[serde(rename = "currency")]
    Currency,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "timestamp")]
    Timestamp,
    #[serde(rename = "rating")]
    Rating,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "select")]
    Select,
    #[serde(rename = "record-reference")]
    RecordReference,
    #[serde(rename = "actor-reference")]
    ActorReference,
    #[serde(rename = "location")]
    Location,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "email-address")]
    EmailAddress,
    #[serde(rename = "phone-number")]
    PhoneNumber,
    #[serde(rename = "interaction")]
    Interaction,
    #[serde(rename = "personal-name")]
    PersonalName,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}

