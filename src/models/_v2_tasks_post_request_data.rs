/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V2TasksPostRequestData {
    /// The text content of the task, in the format specified by the `format` property.
    #[serde(rename = "content")]
    pub content: String,
    /// The format of the task content to be created. Rich text formatting, links and @references are not supported.
    #[serde(rename = "format")]
    pub format: Format,
    /// The deadline of the task, in ISO 8601 format.
    #[serde(rename = "deadline_at", deserialize_with = "Option::deserialize")]
    pub deadline_at: Option<String>,
    /// Whether the task has been completed.
    #[serde(rename = "is_completed")]
    pub is_completed: bool,
    // #[serde(rename = "linked_records")]
    // pub linked_records: Vec<crate::models::AnyOfLessThanGreaterThan>,
    // #[serde(rename = "assignees")]
    // pub assignees: Vec<crate::models::AnyOfLessThanGreaterThan>,
}

impl V2TasksPostRequestData {
    pub fn new(
        content: String,
        format: Format,
        deadline_at: Option<String>,
        is_completed: bool,
        // linked_records: Vec<crate::models::AnyOfLessThanGreaterThan>,
        // assignees: Vec<crate::models::AnyOfLessThanGreaterThan>,
    ) -> V2TasksPostRequestData {
        V2TasksPostRequestData {
            content,
            format,
            deadline_at,
            is_completed,
            // linked_records,
            // assignees,
        }
    }
}

/// The format of the task content to be created. Rich text formatting, links and @references are not supported.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "plaintext")]
    Plaintext,
}

impl Default for Format {
    fn default() -> Format {
        Self::Plaintext
    }
}
