/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct V2TargetIdentifierAttributesPostRequestData {
    /// The name of the attribute. The title will be visible across Attio's UI.
    #[serde(rename = "title", deserialize_with = "Option::deserialize")]
    pub title: Option<serde_json::Value>,
    /// A text description for the attribute.
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<serde_json::Value>,
    /// A unique, human-readable slug to access the attribute through URLs and API calls. Formatted in snake case.
    #[serde(rename = "api_slug", deserialize_with = "Option::deserialize")]
    pub api_slug: Option<serde_json::Value>,
    /// The type of the attribute. This value affects the possible `config` values. Attributes of type \"status\" are not supported on objects.
    #[serde(rename = "type", deserialize_with = "Option::deserialize")]
    pub r#type: Option<Type>,
    /// When `is_required` is `true`, new records/entries must have a value for this attribute. If `false`, values may be `null`. This value does not affect existing data and you do not need to backfill `null` values if changing `is_required` from `false` to `true`.
    #[serde(rename = "is_required", deserialize_with = "Option::deserialize")]
    pub is_required: Option<serde_json::Value>,
    /// Whether or not new values for this attribute must be unique. Uniqueness restrictions are only applied to new data and do not apply retroactively to previously created data.
    #[serde(rename = "is_unique", deserialize_with = "Option::deserialize")]
    pub is_unique: Option<serde_json::Value>,
    /// Whether or not this attribute can have multiple values. Multiselect is only available on some value types.
    #[serde(rename = "is_multiselect", deserialize_with = "Option::deserialize")]
    pub is_multiselect: Option<serde_json::Value>,
    #[serde(rename = "default_value", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<Box<crate::models::V2TargetIdentifierAttributesPostRequestDataDefaultValue>>,
    #[serde(rename = "config")]
    pub config: Box<crate::models::V2TargetIdentifierAttributesPostRequestDataConfig>,
}

impl V2TargetIdentifierAttributesPostRequestData {
    pub fn new(title: Option<serde_json::Value>, description: Option<serde_json::Value>, api_slug: Option<serde_json::Value>, r#type: Option<Type>, is_required: Option<serde_json::Value>, is_unique: Option<serde_json::Value>, is_multiselect: Option<serde_json::Value>, config: crate::models::V2TargetIdentifierAttributesPostRequestDataConfig) -> V2TargetIdentifierAttributesPostRequestData {
        V2TargetIdentifierAttributesPostRequestData {
            title,
            description,
            api_slug,
            r#type,
            is_required,
            is_unique,
            is_multiselect,
            default_value: None,
            config: Box::new(config),
        }
    }
}

/// The type of the attribute. This value affects the possible `config` values. Attributes of type \"status\" are not supported on objects.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "checkbox")]
    Checkbox,
    #[serde(rename = "currency")]
    Currency,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "timestamp")]
    Timestamp,
    #[serde(rename = "rating")]
    Rating,
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "select")]
    Select,
    #[serde(rename = "record-reference")]
    RecordReference,
    #[serde(rename = "actor-reference")]
    ActorReference,
    #[serde(rename = "location")]
    Location,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "email-address")]
    EmailAddress,
    #[serde(rename = "phone-number")]
    PhoneNumber,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}

