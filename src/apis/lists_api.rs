/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_lists_list_get`]
#[derive(Clone, Debug)]
pub struct V2ListsListGetParams {
    pub list: String
}

/// struct for passing parameters to the method [`v2_lists_list_patch`]
#[derive(Clone, Debug)]
pub struct V2ListsListPatchParams {
    pub list: String,
    pub v2_lists_list_patch_request: crate::models::V2ListsListPatchRequest
}

/// struct for passing parameters to the method [`v2_lists_post`]
#[derive(Clone, Debug)]
pub struct V2ListsPostParams {
    pub v2_lists_post_request: crate::models::V2ListsPostRequest
}


/// struct for typed errors of method [`v2_lists_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ListsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_lists_list_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ListsListGetError {
    Status404(crate::models::V2ListsListGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_lists_list_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ListsListPatchError {
    Status400(crate::models::V2ListsPost400Response),
    Status404(crate::models::V2ListsListGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_lists_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ListsPostError {
    Status400(crate::models::V2ListsPost400Response),
    Status403(crate::models::V2ListsPost403Response),
    Status404(crate::models::V2ListsPost404Response),
    UnknownValue(serde_json::Value),
}


/// List all lists that your access token has access to. lists are returned in the order that they are sorted in the sidebar.  Required scopes: `list_configuration:read`.
pub async fn v2_lists_get(configuration: &configuration::Configuration) -> Result<crate::models::V2ListsGet200Response, Error<V2ListsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/lists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ListsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a single list in your workspace that your access token has access to.  Required scopes: `list_configuration:read`.
pub async fn v2_lists_list_get(configuration: &configuration::Configuration, params: V2ListsListGetParams) -> Result<crate::models::V2ListsPost200Response, Error<V2ListsListGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list = params.list;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/lists/{list}", local_var_configuration.base_path, list=crate::apis::urlencode(list));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ListsListGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an existing list. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters. Please note that lists must have either `workspace_access` set to `\"full-access\"` or one or more element of `workspace_member_access` with a `\"full-access\"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member level access for lists. Changing the parent object of a list is not possible through the API as it can have unintended side-effects that should be considered carefully. If you wish to carry out a parent object change you should do so through the UI.  Required scopes: `list_configuration:read-write`.
pub async fn v2_lists_list_patch(configuration: &configuration::Configuration, params: V2ListsListPatchParams) -> Result<crate::models::V2ListsPost200Response, Error<V2ListsListPatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let list = params.list;
    let v2_lists_list_patch_request = params.v2_lists_list_patch_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/lists/{list}", local_var_configuration.base_path, list=crate::apis::urlencode(list));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_lists_list_patch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ListsListPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a new list.  Once you have your list, add attributes to it using the [Create attribute](/reference/post_v2-target-identifier-attributes) API, and add records to it using the [Add records to list](/reference/post_v2-lists-list-entries) API.   New lists must specify which records can be added with the `parent_object` parameter which accepts either an object slug or an object ID. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters.  Please note that new lists must have either `workspace_access` set to `\"full-access\"` or one or more element of `workspace_member_access` with a `\"full-access\"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member-level access for lists.  Required scopes: `list_configuration:read-write`.
pub async fn v2_lists_post(configuration: &configuration::Configuration, params: V2ListsPostParams) -> Result<crate::models::V2ListsPost200Response, Error<V2ListsPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let v2_lists_post_request = params.v2_lists_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/lists", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_lists_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ListsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

