/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_get`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeGetParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_options_get`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeOptionsGetParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub show_archived: Option<bool>
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_options_option_patch`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeOptionsOptionPatchParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub option: String,
    pub v2_target_identifier_attributes_attribute_options_option_patch_request: crate::models::V2TargetIdentifierAttributesAttributeOptionsOptionPatchRequest
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_options_post`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeOptionsPostParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub v2_target_identifier_attributes_attribute_options_post_request: crate::models::V2TargetIdentifierAttributesAttributeOptionsPostRequest
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_patch`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributePatchParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub v2_target_identifier_attributes_attribute_patch_request: crate::models::V2TargetIdentifierAttributesAttributePatchRequest
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_statuses_get`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeStatusesGetParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub show_archived: Option<bool>
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_statuses_post`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeStatusesPostParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub v2_target_identifier_attributes_attribute_statuses_post_request: crate::models::V2TargetIdentifierAttributesAttributeStatusesPostRequest
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_attribute_statuses_status_patch`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesAttributeStatusesStatusPatchParams {
    pub target: String,
    pub identifier: String,
    pub attribute: String,
    pub status: String,
    pub v2_target_identifier_attributes_attribute_statuses_status_patch_request: crate::models::V2TargetIdentifierAttributesAttributeStatusesStatusPatchRequest
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_get`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesGetParams {
    pub target: String,
    pub identifier: String,
    pub limit: Option<i32>,
    pub offset: Option<i32>,
    pub show_archived: Option<bool>
}

/// struct for passing parameters to the method [`v2_target_identifier_attributes_post`]
#[derive(Clone, Debug)]
pub struct V2TargetIdentifierAttributesPostParams {
    pub target: String,
    pub identifier: String,
    pub v2_target_identifier_attributes_post_request: crate::models::V2TargetIdentifierAttributesPostRequest
}


/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeGetError {
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_options_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeOptionsGetError {
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_options_option_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeOptionsOptionPatchError {
    Status400(crate::models::V2TargetIdentifierAttributesAttributeOptionsOptionPatch400Response),
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    Status409(crate::models::V2TargetIdentifierAttributesAttributeOptionsPost409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_options_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeOptionsPostError {
    Status400(crate::models::V2TargetIdentifierAttributesAttributeOptionsPost400Response),
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    Status409(crate::models::V2TargetIdentifierAttributesAttributeOptionsPost409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributePatchError {
    Status400(crate::models::V2TargetIdentifierAttributesAttributePatch400Response),
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_statuses_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeStatusesGetError {
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_statuses_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeStatusesPostError {
    Status400(crate::models::V2TargetIdentifierAttributesAttributeStatusesPost400Response),
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    Status409(crate::models::V2TargetIdentifierAttributesAttributeStatusesPost409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_attribute_statuses_status_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesAttributeStatusesStatusPatchError {
    Status400(crate::models::V2TargetIdentifierAttributesAttributeStatusesStatusPatch400Response),
    Status404(crate::models::V2TargetIdentifierAttributesAttributeGet404Response),
    Status409(crate::models::V2TargetIdentifierAttributesAttributeStatusesPost409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_target_identifier_attributes_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2TargetIdentifierAttributesPostError {
    Status400(crate::models::V2TargetIdentifierAttributesPost400Response),
    Status404(crate::models::V2TargetIdentifierAttributesPost404Response),
    Status409(crate::models::V2TargetIdentifierAttributesPost409Response),
    UnknownValue(serde_json::Value),
}


/// Gets information about a single attribute on either an object or a list.  Required scopes: `object_configuration:read`.
pub async fn v2_target_identifier_attributes_attribute_get(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeGetParams) -> Result<crate::models::V2TargetIdentifierAttributesPost200Response, Error<V2TargetIdentifierAttributesAttributeGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists all select options for a particular attribute on either an object or a list.  Required scopes: `object_configuration:read`.
pub async fn v2_target_identifier_attributes_attribute_options_get(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeOptionsGetParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeOptionsGet200Response, Error<V2TargetIdentifierAttributesAttributeOptionsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let show_archived = params.show_archived;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/options", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = show_archived {
        local_var_req_builder = local_var_req_builder.query(&[("show_archived", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeOptionsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a select option on an attribute on either an object or a list.  Required scopes: `object_configuration:read-write`.
pub async fn v2_target_identifier_attributes_attribute_options_option_patch(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeOptionsOptionPatchParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeOptionsPost200Response, Error<V2TargetIdentifierAttributesAttributeOptionsOptionPatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let option = params.option;
    let v2_target_identifier_attributes_attribute_options_option_patch_request = params.v2_target_identifier_attributes_attribute_options_option_patch_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/options/{option}", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute), option=crate::apis::urlencode(option));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_attribute_options_option_patch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeOptionsOptionPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Adds a select option to a select attribute on an object or a list.  Required scopes: `object_configuration:read-write`.
pub async fn v2_target_identifier_attributes_attribute_options_post(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeOptionsPostParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeOptionsPost200Response, Error<V2TargetIdentifierAttributesAttributeOptionsPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let v2_target_identifier_attributes_attribute_options_post_request = params.v2_target_identifier_attributes_attribute_options_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/options", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_attribute_options_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeOptionsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a single attribute on a given object or list.  Required scopes: `object_configuration:read-write`.
pub async fn v2_target_identifier_attributes_attribute_patch(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributePatchParams) -> Result<crate::models::V2TargetIdentifierAttributesPost200Response, Error<V2TargetIdentifierAttributesAttributePatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let v2_target_identifier_attributes_attribute_patch_request = params.v2_target_identifier_attributes_attribute_patch_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_attribute_patch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributePatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists all statuses for a particular status attribute on either an object or a list.  Required scopes: `object_configuration:read`.
pub async fn v2_target_identifier_attributes_attribute_statuses_get(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeStatusesGetParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeStatusesGet200Response, Error<V2TargetIdentifierAttributesAttributeStatusesGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let show_archived = params.show_archived;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/statuses", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = show_archived {
        local_var_req_builder = local_var_req_builder.query(&[("show_archived", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeStatusesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add a new status to a status attribute on either an object or a list.  Required scopes: `object_configuration:read-write`.
pub async fn v2_target_identifier_attributes_attribute_statuses_post(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeStatusesPostParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeStatusesPost200Response, Error<V2TargetIdentifierAttributesAttributeStatusesPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let v2_target_identifier_attributes_attribute_statuses_post_request = params.v2_target_identifier_attributes_attribute_statuses_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/statuses", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_attribute_statuses_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeStatusesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update a status on an status attribute on either an object or a list.  Required scopes: `object_configuration:read-write`.
pub async fn v2_target_identifier_attributes_attribute_statuses_status_patch(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesAttributeStatusesStatusPatchParams) -> Result<crate::models::V2TargetIdentifierAttributesAttributeStatusesPost200Response, Error<V2TargetIdentifierAttributesAttributeStatusesStatusPatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let attribute = params.attribute;
    let status = params.status;
    let v2_target_identifier_attributes_attribute_statuses_status_patch_request = params.v2_target_identifier_attributes_attribute_statuses_status_patch_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes/{attribute}/statuses/{status}", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier), attribute=crate::apis::urlencode(attribute), status=crate::apis::urlencode(status));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_attribute_statuses_status_patch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesAttributeStatusesStatusPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.  Required scopes: `object_configuration:read`.
pub async fn v2_target_identifier_attributes_get(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesGetParams) -> Result<crate::models::V2TargetIdentifierAttributesGet200Response, Error<V2TargetIdentifierAttributesGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let limit = params.limit;
    let offset = params.offset;
    let show_archived = params.show_archived;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = show_archived {
        local_var_req_builder = local_var_req_builder.query(&[("show_archived", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a new attribute on either an object or a list.  To create an attributeon an object, you must also have the `object_configuration:read-write` scope.  To create an attributeon a list, you must also have the `list_configuration:read-write` scope.
pub async fn v2_target_identifier_attributes_post(configuration: &configuration::Configuration, params: V2TargetIdentifierAttributesPostParams) -> Result<crate::models::V2TargetIdentifierAttributesPost200Response, Error<V2TargetIdentifierAttributesPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let target = params.target;
    let identifier = params.identifier;
    let v2_target_identifier_attributes_post_request = params.v2_target_identifier_attributes_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/{target}/{identifier}/attributes", local_var_configuration.base_path, target=crate::apis::urlencode(target), identifier=crate::apis::urlencode(identifier));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_target_identifier_attributes_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2TargetIdentifierAttributesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

