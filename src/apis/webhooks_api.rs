/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_webhooks_get`]
#[derive(Clone, Debug)]
pub struct V2WebhooksGetParams {
    pub limit: Option<i32>,
    pub offset: Option<i32>
}

/// struct for passing parameters to the method [`v2_webhooks_post`]
#[derive(Clone, Debug)]
pub struct V2WebhooksPostParams {
    pub v2_webhooks_post_request: crate::models::V2WebhooksPostRequest
}

/// struct for passing parameters to the method [`v2_webhooks_webhook_id_delete`]
#[derive(Clone, Debug)]
pub struct V2WebhooksWebhookIdDeleteParams {
    pub webhook_id: serde_json::Value
}

/// struct for passing parameters to the method [`v2_webhooks_webhook_id_get`]
#[derive(Clone, Debug)]
pub struct V2WebhooksWebhookIdGetParams {
    pub webhook_id: String
}

/// struct for passing parameters to the method [`v2_webhooks_webhook_id_patch`]
#[derive(Clone, Debug)]
pub struct V2WebhooksWebhookIdPatchParams {
    pub webhook_id: serde_json::Value,
    pub v2_webhooks_webhook_id_patch_request: crate::models::V2WebhooksWebhookIdPatchRequest
}


/// struct for typed errors of method [`v2_webhooks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2WebhooksGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_webhooks_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2WebhooksPostError {
    Status400(crate::models::V2WebhooksPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_webhooks_webhook_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2WebhooksWebhookIdDeleteError {
    Status404(crate::models::V2WebhooksWebhookIdDelete404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_webhooks_webhook_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2WebhooksWebhookIdGetError {
    Status404(crate::models::V2WebhooksWebhookIdGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_webhooks_webhook_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2WebhooksWebhookIdPatchError {
    Status404(crate::models::V2WebhooksWebhookIdPatch404Response),
    UnknownValue(serde_json::Value),
}


/// Get all of the webhooks in your workspace.  Required scopes: `webhook:read`.
pub async fn v2_webhooks_get(configuration: &configuration::Configuration, params: V2WebhooksGetParams) -> Result<crate::models::V2WebhooksGet200Response, Error<V2WebhooksGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let limit = params.limit;
    let offset = params.offset;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/webhooks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2WebhooksGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a webhook and associated subscriptions.  Required scopes: `webhook:read-write`.
pub async fn v2_webhooks_post(configuration: &configuration::Configuration, params: V2WebhooksPostParams) -> Result<crate::models::V2WebhooksPost200Response, Error<V2WebhooksPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let v2_webhooks_post_request = params.v2_webhooks_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/webhooks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_webhooks_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2WebhooksPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a webhook by ID.  Required scopes: `webhook:read-write`.
pub async fn v2_webhooks_webhook_id_delete(configuration: &configuration::Configuration, params: V2WebhooksWebhookIdDeleteParams) -> Result<serde_json::Value, Error<V2WebhooksWebhookIdDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let webhook_id = params.webhook_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/webhooks/{webhook_id}", local_var_configuration.base_path, webhook_id=webhook_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2WebhooksWebhookIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a single webhook.  Required scopes: `webhook:read`.
pub async fn v2_webhooks_webhook_id_get(configuration: &configuration::Configuration, params: V2WebhooksWebhookIdGetParams) -> Result<crate::models::V2WebhooksPost200Response, Error<V2WebhooksWebhookIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let webhook_id = params.webhook_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/webhooks/{webhook_id}", local_var_configuration.base_path, webhook_id=crate::apis::urlencode(webhook_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2WebhooksWebhookIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update a webhook and associated subscriptions.  Required scopes: `webhook:read-write`.
pub async fn v2_webhooks_webhook_id_patch(configuration: &configuration::Configuration, params: V2WebhooksWebhookIdPatchParams) -> Result<crate::models::V2WebhooksPost200Response, Error<V2WebhooksWebhookIdPatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let webhook_id = params.webhook_id;
    let v2_webhooks_webhook_id_patch_request = params.v2_webhooks_webhook_id_patch_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/webhooks/{webhook_id}", local_var_configuration.base_path, webhook_id=webhook_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_webhooks_webhook_id_patch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2WebhooksWebhookIdPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

