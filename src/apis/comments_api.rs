/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_comments_comment_id_delete`]
#[derive(Clone, Debug)]
pub struct V2CommentsCommentIdDeleteParams {
    pub comment_id: String
}

/// struct for passing parameters to the method [`v2_comments_comment_id_get`]
#[derive(Clone, Debug)]
pub struct V2CommentsCommentIdGetParams {
    pub comment_id: String
}

/// struct for passing parameters to the method [`v2_comments_post`]
#[derive(Clone, Debug)]
pub struct V2CommentsPostParams {
    pub v2_comments_post_request: crate::models::V2CommentsPostRequest
}


/// struct for typed errors of method [`v2_comments_comment_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2CommentsCommentIdDeleteError {
    Status404(crate::models::V2CommentsCommentIdDelete404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_comments_comment_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2CommentsCommentIdGetError {
    Status404(crate::models::V2CommentsCommentIdGet404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_comments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2CommentsPostError {
    Status400(crate::models::V2CommentsPost400Response),
    UnknownValue(serde_json::Value),
}


/// Deletes a comment by ID. If deleting a comment at the head of a thread, all messages in the thread are also deleted.  Required scopes: `comment:read-write`.
pub async fn v2_comments_comment_id_delete(configuration: &configuration::Configuration, params: V2CommentsCommentIdDeleteParams) -> Result<serde_json::Value, Error<V2CommentsCommentIdDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let comment_id = params.comment_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/comments/{comment_id}", local_var_configuration.base_path, comment_id=crate::apis::urlencode(comment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2CommentsCommentIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a single comment by ID.  To view comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.  To view comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.  Required scopes: `comment:read`.
pub async fn v2_comments_comment_id_get(configuration: &configuration::Configuration, params: V2CommentsCommentIdGetParams) -> Result<crate::models::V2CommentsPost200Response, Error<V2CommentsCommentIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let comment_id = params.comment_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/comments/{comment_id}", local_var_configuration.base_path, comment_id=crate::apis::urlencode(comment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2CommentsCommentIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a new comment related to an existing thread, record or entry.  To create comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.  To create comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.  Required scopes: `comment:read-write`.
pub async fn v2_comments_post(configuration: &configuration::Configuration, params: V2CommentsPostParams) -> Result<crate::models::V2CommentsPost200Response, Error<V2CommentsPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let v2_comments_post_request = params.v2_comments_post_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/comments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&v2_comments_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2CommentsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

