/*
 * Attio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@attio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`v2_threads_get`]
#[derive(Clone, Debug)]
pub struct V2ThreadsGetParams {
    pub record_id: Option<String>,
    pub object: Option<String>,
    pub entry_id: Option<String>,
    pub list: Option<String>,
    pub limit: Option<i32>,
    pub offset: Option<i32>
}

/// struct for passing parameters to the method [`v2_threads_thread_id_get`]
#[derive(Clone, Debug)]
pub struct V2ThreadsThreadIdGetParams {
    pub thread_id: String
}


/// struct for typed errors of method [`v2_threads_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ThreadsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_threads_thread_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2ThreadsThreadIdGetError {
    Status404(crate::models::V2ThreadsThreadIdGet404Response),
    UnknownValue(serde_json::Value),
}


/// List threads of comments on a record or list entry.  To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.  To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.  Required scopes: `comment:read`.
pub async fn v2_threads_get(configuration: &configuration::Configuration, params: V2ThreadsGetParams) -> Result<crate::models::V2ThreadsGet200Response, Error<V2ThreadsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let record_id = params.record_id;
    let object = params.object;
    let entry_id = params.entry_id;
    let list = params.list;
    let limit = params.limit;
    let offset = params.offset;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/threads", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = record_id {
        local_var_req_builder = local_var_req_builder.query(&[("record_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object {
        local_var_req_builder = local_var_req_builder.query(&[("object", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = entry_id {
        local_var_req_builder = local_var_req_builder.query(&[("entry_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list {
        local_var_req_builder = local_var_req_builder.query(&[("list", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ThreadsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all comments in a thread.  To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.  To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.  Required scopes: `comment:read`.
pub async fn v2_threads_thread_id_get(configuration: &configuration::Configuration, params: V2ThreadsThreadIdGetParams) -> Result<crate::models::V2ThreadsThreadIdGet200Response, Error<V2ThreadsThreadIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let thread_id = params.thread_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/threads/{thread_id}", local_var_configuration.base_path, thread_id=crate::apis::urlencode(thread_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V2ThreadsThreadIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

